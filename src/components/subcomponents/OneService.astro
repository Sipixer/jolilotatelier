---
import Button from './Button.astro';

export type Service = {
  number: string;
  title: string;
  subtitle: string;
  description: string[];
  buttonText?: string;
  buttonLink?: string;
  color?: string;
  textColor?: string;
  isButton?: boolean;
  maxWidth?: string;
};
export type Props = Service;
const { number, title, subtitle, description, buttonText, buttonLink, color, textColor, isButton, maxWidth } =
  Astro.props;
---

<li class="flex gap-6 text-black/90 glide__slide pr-5" style={`max-width: ${maxWidth};`}>
  <div
    class="progress-vertical-one-service relative mt-4 bg-black/90 border-black/90 border-l rounded-none"
    style={`background-color: ${color};border-color: ${color};`}
  >
    <div
      class="absolute bottom-0 left-1/2 h-4 w-4 -translate-x-1/2 translate-y-full overflow-hidden rounded-full border border-black"
      style={`border-color: ${color};`}
    >
    </div>
  </div>
  <div class="flex flex-col gap-3 font-larken">
    <p class="text-5xl" style={`color: ${color};`}>{number}</p>
    <p class="text-base" style={`color: ${color};`}>{title}</p>
    <p class="font-poppins text-xs font-normal italic text-subtitlecard" style={`color: ${textColor};`}>{subtitle}</p>
    <div class="flex flex-col gap-3" style={`color: ${textColor};`}>
      {description.map((item) => <p class="font-poppins">{item}</p>)}
    </div>
    {
      isButton &&
        (color === '#cc9f5c' ? (
          <a
            class="mt-2 w-fit bg-orange px-8 py-2 font-poppins text-xs transition ease-in-out hover:bg-marron_fonce text-white"
            href={buttonLink}
          >
            {buttonText ? buttonText : "c'est ce qu'il me faut"}
          </a>
        ) : (
          <Button url={buttonLink || '#'} color={color} text={buttonText ? buttonText : "c'est ce qu'il me faut"} />
        ))
    }
  </div>
</li>

<style>
  .progress-vertical-one-service {
    width: 1px;
    height: 0px;
  }
  .progress-vertical-one-service.animate {
    animation: progress-vertical-one-service 2s ease-in-out forwards;
  }
  @keyframes progress-vertical-one-service {
    0% {
      height: 0px;
    }
    100% {
      height: 120px;
    }
  }
</style>
<script>
  setup();
  document.addEventListener('astro:after-swap', setup);
  function setup() {
    function handleIntersection(entries: any, observer: any) {
      entries.forEach((entry: any) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate');
          observer.unobserve(entry.target);
        }
      });
    }

    // Créer l'instance de l'observateur
    const observer = new IntersectionObserver(handleIntersection);

    // Sélectionner l'élément cible
    const element = document.querySelectorAll('.progress-vertical-one-service');

    // Observer l'élément cible
    if (element) {
      element.forEach((el) => {
        observer.observe(el);
      });
    }
  }
</script>
