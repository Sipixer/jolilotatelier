---
import { Image } from 'astro:assets';
import GuillemetsIcon from '../Icons/GuillemetsIcon.astro';
import type { ImageMetadata } from 'astro';
export type Props = {
  image: ImageMetadata;
  title: string;
  description?: string;
};

const { image, title, description } = Astro.props;
---

<div class="flex gap-6 text-black/90 max-lg:justify-center">
  <div class="progress-vertical-one-service relative mt-[100px] bg-black/90 border-black/90 border-l rounded-none">
    <div
      class="absolute bottom-0 left-1/2 h-4 w-4 -translate-x-1/2 translate-y-full overflow-hidden rounded-full border border-black"
    >
    </div>
  </div>
  <div class="flex flex-col gap-4">
    <Image
      src={image}
      alt="Photo de fond(un pot de fleur avec de la decoration)"
      class="h-full max-lg:max-h-96 w-full object-cover"
    />
    <p class="font-larken text-lg">{title}</p>
    {
      description && description.length > 0 && (
        <div class="max-h-32 overflow-y-auto">
          <div class="float-left mr-1">
            <GuillemetsIcon />
          </div>
          <p class="pr-4 font-poppins">{description}</p>
        </div>
      )
    }
  </div>
</div>

<style>
  .progress-vertical-one-service {
    width: 1px;
    height: 0px;
  }
  .progress-vertical-one-service.animate {
    animation: progress-vertical-one-service 2s ease-in-out forwards;
  }
  @keyframes progress-vertical-one-service {
    0% {
      height: 0px;
    }
    100% {
      height: 120px;
    }
  }
</style>

<script is:inline>
setup();
function setup() {
  // Fonction de rappel pour l'intersection
  function handleIntersection(entries, observer) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate');
        observer.unobserve(entry.target);
      }
    });
  }

  // Créer l'instance de l'observateur
  const observer = new IntersectionObserver(handleIntersection);

  // Sélectionner l'élément cible
  const element = document.querySelectorAll('.progress-vertical-one-service');

  // Observer l'élément cible
  if (element) {
    element.forEach((el) => {
      observer.observe(el);
    });
  }
}
</script>
